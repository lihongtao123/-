1.【线程安全与线程不安全指的是什么？】
	
	这个问题只会发生在多线程的时候，
	多线程在操作数据的时候，是否会发生 并发性异常。
	安全是由锁机制去控制，防止数据超出意外范围。
	不安全是没有这个机制，导致数据超出预定范围。



2.【修饰符：final，static，abstract】

	final：最终的
		final修饰的类不可继承
		final修饰的类中属性可以理解成常量（必须初始化赋值，名字全部大写，不能修改的）
		final修饰的方法是最终方法，不可被重写
			

	static：静态的
		static修饰的属性整个程序只有一个，第一次创建，以后就不在创建了。
		static修饰的方法静态方法，静态方法直接调用，不用实例化类。
		static块类被加载的时候，自动执行（在构造函数之前执行的）


	abstract：抽象的
		abstract修饰的类，禁止实例化（因为可能会有抽象方法，导致程序无法创建内存）
		特殊情况：一个抽象类，不一定会有抽象方法，禁止实例化。
		abstract修饰的方法，只能声明，不能有方法体。



3.【abstract和interface有什么区别？】

	抽象类是类，可以有实现的方法和属性。
	接口不是类，是抽象方法的集合。

	一个类可以继承extends一个抽象类，但是可以实现implements多个接口。


 	(java纯面向对象的语言，为了弥补单一继承不足，引入了接口的概念，
	表面上看似是多重继承，但是本质不对的。)



抽象类和接口
 
  共同点：

   1. 不能实例化
   2. 可以有抽象方法
   3. 被子类继承或实现时要实现里面的所有抽象方法，除非子类也是一个抽象类或接口

   不同点：
   1. 抽象类可以有成员属性
   2. 抽象类可以有具体方法
   3. 抽象类可以有构造器
   4. 接口可以继承多个接口
   5. 一个类可以实现多个接口

	【C++多重继承】



4.【八大基础类型：】
	byte  short  int  long  float  double  char  bool (紫色的关键字)
	String类不可继承，因为内部是final。


	3 + 1.1 + 'a'

	问：最终结果 
		什么类型：double
		什么值：101.1


	数据类型在强语言中会自动转换：

	char(ASCII) < shor < int < long < float < double



5.【SQL题目】
	有两张表，学生表  和  成绩表

	一个学生有 三个成绩，英文，语文，数学

	学生id是两张表的关联字段，即主外键关系

	请编写语句，查询出：所有课程成绩都高于80分的学生姓名。

	学生表： id（PK），名字
	成绩表：id（FK），课程，成绩



	select * from  学生表 
	inner join 成绩表 on 学生表.id=成绩表.id
	group by 学生id
	having min(成绩)>80


	select * from  学生表 
	inner join 成绩表 on 学生表.id=成绩表.id
	where id not 学生in(select 学生id from 成绩表 where 成绩<80)

6.【javaSE问题】

	请编写一个冒泡排序法，将一下数组进行排序：

		int[] arr = {98,34,65,12,76};


7.【OOP题目】

	请问什么是面向对象(的编程)？
		将显示世界中，对象的概念，使用代码表现出来。
	
	面向对象有那些基本原则？
		封装，继承，多态	 

	各体现了什么特性？
		封装：可维护性       
		继承：可扩展性
		多态：灵活性
		

8.【JavaSE问题】

	多线程有几种实现方式？
	两种

	各是什么类型的对象，都如何去实现？
		class Thread              已经实现了Runnable接口，但是没有写代码
		interface Runnable    本质Runnable接口

		自定义一个类：
			extends Thread{重写run方法}
			implements Runnable{实现run方法}
		
	哪一种方式更好？
	Runnable接口的实现更好，少一个中间的系统实现类Thread，
	满足了 OOP编程中的七大原则中：开闭原则

	要实现多线程我们必须运行那个方法？
	START调用


9.【JavaSE问题】

	ArrayList 和 LinkedList 有什么区别？
	ArrayList  地址是有序的随机访问速度快 （数据读取写入快）
	LinkedList  对于添加和删除元素的效率高（数据操作快）

	HashMap 和 HashSet 有什么区别？
	HashMap 键值对映射关系存放数据：相同键的时候，替换值
	HashSet   直接存放数据：值重复的时候，无法存入的


10.【什么是序列化？什么是反序列化？】
	
	序列化是将一个运行在内存上的具体对象，写成物理文档。
	对象中的数据同时也在的。
	读取的时候，不仅可以得到对象，同时原本的值也在里面。
	反序列化就是将一个物理文档，返还到内存上，继续运行。



11.【HashMap 和 List 有什么区别？】
	HashMap键值对映射关系保存数据的。
	List都是数组形式保存数据的。




12.【什么是反射？反射对象与实例化对象有什么区别？】
	所有语言都有反射机制，都是很重要一环。

	反射是【动态】的去解析一个具体的对象，得到对象中的信息。

	反射的出来的对象，只有信息，不能直接操作的。
	反射出来的对象，所有信息不受访问修饰符的限制。
	反射操作的集合对象，不受类型的限制，可以强制加入的。

	实例化对象是一个完整的整体，以上三者都不能实现。
	实例化对象可以直接使用，无需其他操作。



13.【装饰模式的设计思路？】
	在一个原有对象的基础上，不同的进行原有内容的追加。
	创建一个具体的本体类，其他的都是它的子类，
	子类必须要有主体对象的属性，
	进行操作的时候，我们可以通过super()，现获取原本内容，再追加特有内容。






14.记事本写代码：如何从文件中查找出某一个 "单词" 出现的次数？
	InputStream ips= new InputStream("xx.txt");
	int i =-1;	
	String str="";
	while((i = ips.read())!=-1){
	     str += (char)i;	
	}
	
	int number=0;

	while(true){
		if(str.indexOf("单词")!=-1){
			number++;
			str = str.substring(str.indexOf("单词")+2);
		}
		else{
			break;
		}
	}

	System.out.println("个数：" + number);


15.【什么是子查询，有几种，这么区分】
	一条查询语句中，写入了另一条查询语句，那么，内部的这条查询语句就是子查询

	两种：嵌套子查询   相关子查询

	嵌套：from的前面
		select *,(select count(*) from color) from user;

	相关：where后面
		select * from user where id in (select id from user)




	/**
16.	1,2,3,5,8,13，........第30位的值是多少？记事本写代码
	*/

public static void main(String[] args){
	System.out.println(fibonacci(30));
}

public static int fibonacci(int n){
	if(n==0 || n==1){
		return 1;
	}
	return fibonacci(n-2) + fibonacci(n-1);
}


17.
SQL注入：
	凡是数据库中表的数据，在非正常情况下改变了，都是SQL注入。
	不在规定范围中，出现insert，update，delete，select都不对。

	网页提供验证（脚本）

	程序提供验证（正则，关键字检索）

	数据库表比提供直接操作
		1、不同用户不同权限
		2、提供视图，select
		3、提供函数，select
		4、提供存储过程，insert，update，delete
		5、提供触发器trigger，所有操作监控





18.

int a=0,b=0,c=0,d=0;//联合声明，同一个类型： 中文: [\u4e00-\u9fa5]
		
		String str = "asldkjflksadjflkajsdlkfjslakjdf";
		
		for(int i=0; i<str.length(); i++) {
			
			char x = str.charAt(i);
			
			if(x>=48 && x<=57) {}
			
			if(x>='a' && x<='z') {}
			
			if((""+x).matches("[A-Z]")) {}
			
		}


19.Jquery是JavaScript的一个函数库。
查找网页元素：

	$("#id")
	$(".class")
	$("type类型")
	$("属性匹配")    
		$("input[data='6']")
		$("input[name*='a']")
		$("input[name^='xq']")
		$("input[name$='8']")
	$("层级")
		$("div span")
		$("div>span")
	$("元素").eq(索引)
		$("div").eq(3)

	$("div:odd")所有单数索引
	$("div:even")所有双数索引

20.

装箱，拆箱
	值类型变成引用类型，装，从堆栈转移到堆
	引用类型变成值类型，拆，从堆转移到堆栈


21.
合并结果集，必须保证列数，数据类型相同的时候

//去除重复了
select id,name from user union select age,nickname from yonghu;

//保留全部
select id,name from user union all select age,nickname from yonghu;

22.单例模式：
public class DanLi{
	private static DanLi dl;
	private DanLi(){	}

	public static DanLi getDanLi(){
		if(dl==null){
		      dl = new DanLi();
		}
		return dl;
	}
}
原理：
	1、私有化构造函数，防止外界直接实例化new多个
	2、私有化 静态当前类对象，静态保证内存一个实例
	3、提供公开方法，返回当前类对象的属性

-------------------------------------------------------------------
23.  String,StringBuilder,StringBuffered区别？

String：封装的数据类型，内部是final的，每一次都是一个新的对象。
StringBuilder：类对象，对象的操作，add方法没有锁机制，多线程不安全，速度快
StringBuffered：类对象，对象的操作，add方法有锁机制，多线程安全，速度慢


-------------------------------------------------------------------
24.

js:
	var  str="asdfasdfasdf";
	str.Length     【str.length】    str.length()    str.Length()


java数组有没有length()这个方法? String有没有length()这个方法？
数组是一个对象，对象中，提供了属性
String是一个封装类对象，有方法可以操作的


25.【方法的重写 与 方法的重载 有什么区别？】

	     重写是替换，必须建立在继承的基础上
	     重载是扩展，只要在类中就可以




26.【什么是IOC？什么是AOP？】

	IOC：控制反转，将对象的实例化操作，交给框架。从而实现DI：依赖注入。
	AOP：面向切面，动态的织入可运行的代码。



27.【Error 和 Exception的区别？】
	
	Error是错误，错误是程序员无法操作的，
	程序一旦遇到错误，终止运行，将控制权返还给操作系统。
	Exception是异常，是程序员必须处理的。


==================================================

28.【对于xml文档，SAX解析 和 DOM解析有什么区别？】

	DOM解析方式，是一次性将xml读取到内存，效率低，可以任意遍历每一个节点。
	SAX解析方式，是一行行读取操作，效率高，不能任意遍历。



29.【Jsp 和 Servlet 有什么异同？】

	Servlet是一个服务器端运行的java小程序，
	Jsp也可以运行代码，它是一个特殊的Servlet。

	Servlet于运行的逻辑操作，
	Jsp是HTML和Java代码的结合，可以直接预览；
	Servlet是单例模式，会被编译成一个class文件，
	Jsp是动态网页，每一次请求都会编译一次。
	



30.【简述你对Statement 和 PreparedStatement 的理解？】

	两个对象都是JDBC操作数据库是的语句执行对象，
	Statement：
		直接操作，
		效率高，不安全。
		是一个最基本的方法。
	PreparedStatement：
		预编译操作，
		提供占位符替换参数，效率低，安全可以方法语句形式SQL注入。
		继承于Stetement，对方法进行了扩展


31. 【ajax中同步与异步的区别？】
	同步：发送请求后，必须得到返回结果才会继续执行回调函数。
	异步：发送请求与执行回调函数分开的。



32. 【表单提交中，get与post区别？】
	method="get"：短文本，上限255个字节的数据，拼接地址栏，不安全。
	method="psot"：长文本，无上限，后台按照协议发送，安全的。



33. 【多维数组的定义】
int[][] arr = new int[3][];
arr[0] = new int[1];
arr[1] = new int[2];
arr[2] = new int[3];
【】
【】【】
【】【】【】



34.  请问下列代码后，a的值是多少？ 都执行了：0
int a=0;
if(a++>0|a--<0){}




 int a=0;
 int b=0;

a++ + b;   （++ -- 算一元运算符，优先级大于二元运算符，三元运算  ）

a:
b:


35.【jsp中的九大内置对象？】

	request, response, session, out, 

	config, page, pagecontext, 

	application, exception

	绝对不能说：有cookie

36.

int a=5;                                          //a=5   b=0
int b=a--;       
	//int b = a = a-1
	//int b = a = 4
	//先b=a 然后a=4            //b=5  a=4 
a=b++;			      //a=5  b=6


int a = 5;
int b = a++
int c = ++a;
a=7  b=5  c=7


37. 【继承和多态有什么区别？】
	1、继承是向下的；多态是向上的
	2、继承可以扩展代码（扩展性），多态是替换代码（灵活性）


38. 【序列化和反序列化】
	序列化：把内存上对象转换成一个物理文档。
	反：把一个物理文档恢复到内存上变成对象。



39.【不能算正规问题，是否了解概念】
【父类中能不能重写 或 重载子类方法】

   可以写一样的 方法，但是不是重写（不能添加注解的），
   写了再多态中，会被子类覆盖

   重载可行的，概念是对的，写出来也是对的。





40.【document.getElementById("dv1") 与 $("#dv1")的区别】

//document.getElementById("dv1")
//JavaScript在浏览器内核中的一个 类对象
//是一个div类对象：HTMLDivElement
// HTMLDivElement object = new HTMLDivElement()    		
    		
//$("#dv1")
//JQuery中，通过封装过的一个对象
//都通过封装以后了，
//不能直接使用的，只能调用jquery方法进行操作
//在原始对象的基础上，进行了装饰模式的定义
    		


41.【int 与 Integer的区别？】

int是基础数据类型，int必须赋值，默认值0，只能直接使用。
Integer是封装类对象，无需赋值，默认值null，可以调用属性和方法。


42.【SERVLET API中forward() 与 redirect()的区别？】

redirect：网址重定向，
	内容发送客户的浏览器，浏览器重写请求一个指定的路径。
	（浏览器地址栏变了）

forward：服务器转发，
	服务器直接转向指定的路径，读取内容，回发客户的。
	（浏览器地址栏不变）


43.【HashMap 和 HashTable 的却别】
	HashMap线程不安全的，在多线程操作的时候，没有锁机制的。效率高。
	HashTable线程是安全的，在多线程操作的时候，有锁机制的。效率低。


44.【数据库中，函数function 与 存储过程procedure 的区别】
	函数：
		面向对象的，在数据库中分为两种：
		标量值函数：返回一个值
		表值函数：返回一个结果集result
		函数的定义有要求的：函数必须有返回，利用renturns声明
		它允许直接使用select操作
		【程序调用函数和执行语句一样的】
			statement = "select * from `role表`";
			statement = "select  dbo.fun()"; // 返回一个值的
			statement = "select * from dbo.fun()"; // 返回一个result
	存储过程：
		面向过程的，它不会执行简单操作，都是比较复杂的一段逻辑操作
		存储过程允许输入多个参数，也允许同时输出多个参数
		它是特殊的对象，就是一段逻辑操作，预先编译好
		它是通过 exec 关键字去执行的
		exec proc_aaa;
		declare a varchar(5);
		exec proc_aaa 5,'张三'a output,
		【程序调用存储过程是特殊的方式】



45.【构造函数是否可以被重写，为什么】
	构造函数是特殊的方法，它不能定义返回类型，函数中不存在return，
	因此，它是类特有的，不属于重写范围的，
	它只能被调用：
		实例化：  new  aaaa()
		子类调用： super()
 


46.【数据库中的三大范式NF】

第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分的。
		 这个单一属性由基本类型构成，包括整形，实数，字符型，日期型等。

第二范式（2NF）
：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖
		（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段
		的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。

第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选字段
		的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如果存
		在“A->B->C”的决定关系，则C传递函数依赖于A。
		因此，满足第三范式的数据库表应该不存在如下依赖关系：
    		关键字段->非关键字段->非关键字段Y


47.【char 和 varchar的区别？】

	非同一编码的
	（基础字符编码）
	char
	varchar
	text
	
	同一编码的
	（默认可以保存4000中编码格式，默认必非同一编码存储大小大一倍）
	nchar
	nvarchar
	ntext

	char：固定长度，在指定范围中，如不足：自动填充空格

	varchar：可变长度，在指定范围中，如不足：按实际大小


48.【final修饰的内容，是引用的变量不能变，还是引用的对象不能变？】

	final，最终的， 类，属性，方法

	类：最终类，禁止继承extends
	
	属性：全部大写，初始化赋值，（常量）

	方法：最终方法，禁止重写

	答案是：引用的变量不能变。【对象可以变的】


49.按照自己的理解，
【请简述一下 Spring框架的运行原理】
	Spring是用于对象之间使用关系的解耦。
	它的原理是 通过配置文件与对象的注解，使用反射机制，动态的实例化对象。
	它使用IOC控制反转(DI依赖注入)，将对象之间的依赖关系返还给框架进行操作。
	


50. 【请简述一下 SpringMVC框架运行的原理】
	SpringMVC用于代码之间的解耦，将处理不同内容的代码分开编写。
	通过统一的一个servet，进行请求的拦截，
	然后动态去调用指定的控制器和方法，
	方法通过配置，先运行代码，然后合并视图文件，
	最终生成一个静态html的String字符串
	响应回发客户端浏览器.
















































































